// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$ExpectError Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }' 1`] = `
"Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type 'number'."
`;

exports[`$ExpectError Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }' 2`] = `
"Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type 'number'."
`;

exports[`$ExpectError Argument of type 'null' is not assignable to parameter of type 'string'. 1`] = `"Argument of type 'null' is not assignable to parameter of type 'string'."`;

exports[`$ExpectError Argument of type 'x' is not assignable to parameter of type 'never'. 1`] = `"{} | undefined"`;

exports[`$ExpectError Argument of type 'x' is not assignable to parameter of type 'never'.\`, because 'x' is not in \`{}\`. 1`] = `"boolean"`;

exports[`$ExpectError Supplied parameters do not match any signature of call target. 1`] = `"Expected 2 arguments, but got 3."`;

exports[`$ExpectError not keys 1`] = `"any"`;

exports[`$ExpectError not keys 2`] = `
"Argument of type '{ a: number; b: number; c: number; d: number; }' is not assignable to parameter of type 'Record<\\"a\\" | \\"e\\" | \\"f\\", any>'.
  Object literal may only specify known properties, and 'b' does not exist in type 'Record<\\"a\\" | \\"e\\" | \\"f\\", any>'."
`;

exports[`$ExpectError not keys 3`] = `"any"`;

exports[`$ExpectType "foo" 1`] = `"\\"foo\\""`;

exports[`$ExpectType () => boolean 1`] = `"() => boolean"`;

exports[`$ExpectType () => number[] 1`] = `"() => number[]"`;

exports[`$ExpectType (...args: string[])=>string 1`] = `"(...args: any[]) => string"`;

exports[`$ExpectType (a: any[]) => any[] 1`] = `"(b: {}[] | ArrayLike<{}>) => {}[]"`;

exports[`$ExpectType (a: number) => number[] 1`] = `"(v1: number) => number[]"`;

exports[`$ExpectType (a: number) => number[] 2`] = `"(v1: number) => number[]"`;

exports[`$ExpectType (a: number) => number[] 3`] = `"(a: number) => number[]"`;

exports[`$ExpectType (a: number) => number[] 4`] = `"(a: number) => number[]"`;

exports[`$ExpectType (a: number) => number[] 5`] = `"(a: number) => number[]"`;

exports[`$ExpectType (a: number, b: number) => number[] 1`] = `"(a: number, b: number) => number[]"`;

exports[`$ExpectType (a: number, b: number) => number[] 2`] = `"(a: number, b: number) => number[]"`;

exports[`$ExpectType (list: number[]) => boolean 1`] = `"any"`;

exports[`$ExpectType (v: Object) => Boolean 1`] = `"any"`;

exports[`$ExpectType (v: number) => number 1`] = `"(v1: number) => {}"`;

exports[`$ExpectType (v: number) => number 2`] = `"(v1: number) => {}"`;

exports[`$ExpectType (v2: number) => number 1`] = `"CurriedFunction1<number, number>"`;

exports[`$ExpectType (v2: number) => number 2`] = `"CurriedFunction1<number, number>"`;

exports[`$ExpectType (v3: number) => number 1`] = `"CurriedFunction1<number, number>"`;

exports[`$ExpectType (x0: number) => boolean 1`] = `"(v1: number) => boolean"`;

exports[`$ExpectType (x0: number) => number 1`] = `"(v1: {}) => number"`;

exports[`$ExpectType (x0: number) => number 2`] = `"(v1: {}) => number"`;

exports[`$ExpectType (x0: number) => string 1`] = `"(v1: number) => string"`;

exports[`$ExpectType <T>(v: T) => T 1`] = `"any"`;

exports[`$ExpectType <T1,R>(v1: T1) => R 1`] = `"CurriedFunction1<number, number>"`;

exports[`$ExpectType <T1,R>(v1: T1) => R 2`] = `"CurriedFunction1<number, number>"`;

exports[`$ExpectType <Y, Z>(v2: Y, v3: Z) => ({ x: number; y: Y; z: Z; }) 1`] = `"CurriedFunction2<{}, {}, { x: {}; y: {}; z: {}; }>"`;

exports[`$ExpectType <Y>(v2: Y) => { x: number; y: Y; } 1`] = `"CurriedFunction1<{}, { x: {}; y: {}; }>"`;

exports[`$ExpectType <Z>(v3: Z) => ({ x: number; y: number; z: Z; }) 1`] = `"CurriedFunction1<{}, { x: {}; y: {}; z: {}; }>"`;

exports[`$ExpectType <Z>(v3: Z) => ({ x: number; y: number; z: Z; }) 2`] = `"CurriedFunction1<{}, { x: {}; y: {}; z: {}; }>"`;

exports[`$ExpectType <a>(v: a|[a]) => [a] 1`] = `"Property 'isArrayLike' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType [1, 2] 1`] = `"any"`;

exports[`$ExpectType [1, 2] 2`] = `"any"`;

exports[`$ExpectType [number, string][] 1`] = `"[number, string][]"`;

exports[`$ExpectType [number, string][] 2`] = `"[number, string][]"`;

exports[`$ExpectType [number, string][] 3`] = `"[number, string][]"`;

exports[`$ExpectType [number, string][] 4`] = `"[number, string][]"`;

exports[`$ExpectType [number[], number[]] 1`] = `"[number[], number[]]"`;

exports[`$ExpectType [number[], number[]] 2`] = `"[number[], number[]]"`;

exports[`$ExpectType [number[], string[]] 1`] = `"{}[][]"`;

exports[`$ExpectType [number[], string[]] 2`] = `"{}[][]"`;

exports[`$ExpectType [string, number][] 1`] = `"[\\"a\\" | \\"b\\" | \\"c\\", number][]"`;

exports[`$ExpectType [string, string][] 1`] = `"[\\"x\\" | \\"y\\", string][]"`;

exports[`$ExpectType [string, string][] 2`] = `"[\\"x\\" | \\"y\\", string][]"`;

exports[`$ExpectType [string[], string[]] 1`] = `"[(string[] | ArrayLike<string>)[], (string[] | ArrayLike<string>)[]]"`;

exports[`$ExpectType [string[], string[]] 2`] = `"[(string[] | ArrayLike<string>)[], (string[] | ArrayLike<string>)[]]"`;

exports[`$ExpectType { [index: string]: string } 1`] = `"Dictionary<string>"`;

exports[`$ExpectType { [index: string]: string } 2`] = `
"Argument of type 'string[][]' is not assignable to parameter of type 'List<KeyValuePair<Property, string>>'.
  Type 'string[][]' is not assignable to type 'ArrayLike<KeyValuePair<Property, string>>'.
    Index signatures are incompatible.
      Type 'string[]' is not assignable to type 'KeyValuePair<Property, string>'.
        Property '\\"0\\"' is missing in type 'string[]'."
`;

exports[`$ExpectType { [index: string]: string } 3`] = `"Dictionary<{}>"`;

exports[`$ExpectType { [index: string]: string } 4`] = `"Dictionary<{}>"`;

exports[`$ExpectType { [s: string]: { [s: string]: number } } 1`] = `"{}"`;

exports[`$ExpectType { [s: string]: { [s: string]: number } } 2`] = `"{}"`;

exports[`$ExpectType { 2: R.Dictionary<string> } 1`] = `"Partial<{ 1: { color: string; }; 2: { color: string; bgcolor: string; }; }>"`;

exports[`$ExpectType { a: boolean, b: boolean, values: number[] } 1`] = `"Pick<{ a: boolean; values: number[]; }, \\"a\\"> & Pick<{ b: boolean; values: number[]; }, \\"b\\"> & Record<\\"values\\", string | any[]>"`;

exports[`$ExpectType { a: boolean, b: boolean, values: number[], thing: string } 1`] = `"Pick<{ a: boolean; thing: string; values: number[]; }, \\"a\\"> & Pick<{ b: boolean; thing: string; values: number[]; }, \\"b\\"> & Record<\\"values\\" | \\"thing\\", string>"`;

exports[`$ExpectType { a: number }[] 1`] = `"{}[]"`;

exports[`$ExpectType { a: number }[] 2`] = `"{}[]"`;

exports[`$ExpectType { a: number, b: number } 1`] = `"{ a: number; b: number; }"`;

exports[`$ExpectType { a: number[], b: string[] } 1`] = `"Record<\\"a\\" | \\"b\\", {}[]>"`;

exports[`$ExpectType { a: number[], b: string[] } 2`] = `"Record<\\"a\\" | \\"b\\", {}[]>"`;

exports[`$ExpectType { age: number, name: string }[] 1`] = `"{ age: number; }[]"`;

exports[`$ExpectType { id: number, name: string }[] 1`] = `"{}[]"`;

exports[`$ExpectType { id: number, name: string }[] 2`] = `"{}[]"`;

exports[`$ExpectType { id: number, name: string }[] 3`] = `"{}[]"`;

exports[`$ExpectType { id: number, name: string }[] 4`] = `"{}[]"`;

exports[`$ExpectType { must: { match_phrase: string }[] } 1`] = `"Record<\\"must\\", {}>"`;

exports[`$ExpectType { name: string, age: number }[] 1`] = `"{}[]"`;

exports[`$ExpectType { name: string, age: number }[] 2`] = `"{}[]"`;

exports[`$ExpectType { name: string, age: number }[] 3`] = `"{}[]"`;

exports[`$ExpectType { name: string, grade: number }[] 1`] = `"Pick<{ name: string; age: number; hair: string; grade: number; }, \\"name\\" | \\"grade\\">[]"`;

exports[`$ExpectType { x: number } 1`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number } 2`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number } 3`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number, y: number } 1`] = `"(lens: Lens<number, { x: number; y: number; }>) => { x: number; y: number; }"`;

exports[`$ExpectType { x: number, y: number } 2`] = `"{}"`;

exports[`$ExpectType { x: number, y: number } 3`] = `
"Argument of type '{ x: number; y: number; }' is not assignable to parameter of type 'Lens<number, {}>'.
  Object literal may only specify known properties, and 'x' does not exist in type 'Lens<number, {}>'."
`;

exports[`$ExpectType { x: number, y: number } 4`] = `"(lens: Lens<number, { x: number; y: number; }>) => { x: number; y: number; }"`;

exports[`$ExpectType { x: number, y: number } 5`] = `
"Argument of type '{ x: number; y: number; }' is not assignable to parameter of type 'Lens<number, {}>'.
  Object literal may only specify known properties, and 'x' does not exist in type 'Lens<number, {}>'."
`;

exports[`$ExpectType { x: number, y: number } 6`] = `"{}"`;

exports[`$ExpectType { x: number, y: number }[] 1`] = `
"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<{}, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type 'number' is not assignable to type 'Morphism<{}, boolean>'."
`;

exports[`$ExpectType { x: number, y: number }[] 2`] = `
"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<{}, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type 'number' is not assignable to type 'Morphism<{}, boolean>'."
`;

exports[`$ExpectType { x: number; } 1`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number; } 2`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number; } 3`] = `"{ x: number; }"`;

exports[`$ExpectType { x: number; y: number; } 1`] = `"{ x: {}; y: {}; }"`;

exports[`$ExpectType { x: number; y: number; z: number; } 1`] = `"{ x: {}; y: {}; z: {}; }"`;

exports[`$ExpectType { x: number; y: number; z: number; } 2`] = `"{ x: {}; y: {}; z: {}; }"`;

exports[`$ExpectType {<T,U>(obj1: T, obj2: U): boolean} 1`] = `"{ <T>(a: T): (b: T) => boolean; <T>(_a: Placeholder, b: T): (a: T) => boolean; <$SEL extends \\"1\\">(): <T>(a: T) => (b: T) => boolean; <$SEL extends \\"01\\">(): <T>(_a: Placeholder, b: T) => (a: T) => boolean; <$SEL extends \\"11\\">(): <T>(a: T, b: T) => boolean; <T>(a: T, b: T): boolean; }"`;

exports[`$ExpectType {<U>(obj2: U): boolean} 1`] = `"(b: { a: number; b: number; c: number; d: number; }) => boolean"`;

exports[`$ExpectType {} 1`] = `"{}"`;

exports[`$ExpectType {a: {b: {}}} 1`] = `"{ a?: DeepPartial | undefined; }"`;

exports[`$ExpectType {a: {b: {}}} 2`] = `
"Argument of type '{ a: { b: { c: number; }; }; }' is not assignable to parameter of type '{ a: { b: number; }; }'.
  Types of property 'a' are incompatible.
    Type '{ b: { c: number; }; }' is not assignable to type '{ b: number; }'.
      Types of property 'b' are incompatible.
        Type '{ c: number; }' is not assignable to type 'number'."
`;

exports[`$ExpectType {a: {b: {}}} 3`] = `"{ a?: DeepPartial | undefined; }"`;

exports[`$ExpectType {a: {b: {c: number}}} 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`$ExpectType {a: {b: {c: number}}} 2`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`$ExpectType {a: {b: {c: number}}} 3`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`$ExpectType {a: number}[] 1`] = `"{ a: number; }[]"`;

exports[`$ExpectType {a: number}[] 2`] = `"any[]"`;

exports[`$ExpectType {a: number}[] 3`] = `"any[]"`;

exports[`$ExpectType {a: number}[] 4`] = `"any[]"`;

exports[`$ExpectType {x: 1, y: 2} 1`] = `"any"`;

exports[`$ExpectType {x: 1, y: 2} 2`] = `"any"`;

exports[`$ExpectType 10 1`] = `"10"`;

exports[`$ExpectType Array<number|string> 1`] = `
"Argument of type '(acc: [string, number], pair: [string, number]) => (string | number)[]' is not assignable to parameter of type '(value: (string | number)[], accumulator: [string, number]) => [string, number] | Reduced<[string...'.
  Type '(string | number)[]' is not assignable to type '[string, number] | Reduced<[string, number]>'.
    Type '(string | number)[]' is not assignable to type 'Reduced<[string, number]>'.
      Property '\\"@@transducer/value\\"' is missing in type '(string | number)[]'."
`;

exports[`$ExpectType Array<number|string> 2`] = `"Property 'set' does not exist on type 'Lens<{}, List<{}>>'."`;

exports[`$ExpectType Array<number|undefined> 1`] = `"any[]"`;

exports[`$ExpectType Array<string[]|string> 1`] = `"Argument of type 'string[]' is not assignable to parameter of type 'string'."`;

exports[`$ExpectType Array<string[]|string> 2`] = `"(string | string[])[]"`;

exports[`$ExpectType Array<string[]|string> 3`] = `"(string | string[])[]"`;

exports[`$ExpectType Array<string[]|string> 4`] = `"(string | string[])[]"`;

exports[`$ExpectType Array<string[]|string> 5`] = `"[string, string[]]"`;

exports[`$ExpectType Array<string[]|string> 6`] = `"[string, string[]]"`;

exports[`$ExpectType Array<string[]|string> 7`] = `"[string, string[]]"`;

exports[`$ExpectType Array<string[]|string> 8`] = `"[string, string[]]"`;

exports[`$ExpectType Array<string[]|string> 9`] = `"KeyValuePair<string, number>[]"`;

exports[`$ExpectType Array<string[]|string> 10`] = `"KeyValuePair<string, number>[]"`;

exports[`$ExpectType Array<string[]|string> 11`] = `"KeyValuePair<string, number>[]"`;

exports[`$ExpectType Array<string|string[]> 1`] = `"[string[], string]"`;

exports[`$ExpectType Array<string|string[]> 2`] = `"[string[], string]"`;

exports[`$ExpectType Array<string|string[]> 3`] = `"[string[], string]"`;

exports[`$ExpectType Array<string|string[]> 4`] = `"[string[], string]"`;

exports[`$ExpectType CurriedFunction2<number, number, number> 1`] = `"CurriedFunction2<number, number, number>"`;

exports[`$ExpectType CurriedFunction2<number, number, number> 2`] = `"CurriedFunction2<number, number, number>"`;

exports[`$ExpectType CurriedFunction2<number, number, number> 3`] = `"any"`;

exports[`$ExpectType CurriedFunction3<number, number, number, number> 1`] = `"CurriedFunction3<number, number, number, number>"`;

exports[`$ExpectType CurriedFunction4<number, number, number, number, number> 1`] = `"CurriedFunction4<number, number, number, number, number>"`;

exports[`$ExpectType Dictionary<Object> 1`] = `"Dictionary<{}>"`;

exports[`$ExpectType Dictionary<Object> 2`] = `"Dictionary<{}>"`;

exports[`$ExpectType Dictionary<Object> 3`] = `"Dictionary<{ id: string; }>"`;

exports[`$ExpectType Dictionary<Object[]> 1`] = `"Dictionary<{ score: number; name: string; }[]>"`;

exports[`$ExpectType Dictionary<any> 1`] = `"Pick<{ 'name': string; 'age': number; }, \\"name\\"> & { 'age': number; }"`;

exports[`$ExpectType Dictionary<number> 1`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 2`] = `
"Argument of type 'Partial<{ a: number; b: number; c: number; d: number; }>' is not assignable to parameter of type '{ [key: string]: number; }'.
  Property 'a' is incompatible with index signature.
    Type 'number | undefined' is not assignable to type 'number'.
      Type 'undefined' is not assignable to type 'number'."
`;

exports[`$ExpectType Dictionary<number> 3`] = `"{} | undefined"`;

exports[`$ExpectType Dictionary<number> 4`] = `"{} | undefined"`;

exports[`$ExpectType Dictionary<number> 5`] = `"Record<\\"a\\" | \\"b\\" | \\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 6`] = `"Record<\\"a\\" | \\"b\\" | \\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 7`] = `"Expected 0-2 arguments, but got 3."`;

exports[`$ExpectType Dictionary<number> 8`] = `"Argument of type '(accObject: { [elem: string]: number; }, elem: string, idx: number, list: string[]) => { [elem: s...' is not assignable to parameter of type '(v1: any, index: number, target: any) => any'."`;

exports[`$ExpectType Dictionary<number> 9`] = `"Argument of type '(accObject: { [elem: string]: number; }, elem: string, idx: number, list: string[]) => { [elem: s...' is not assignable to parameter of type '(v1: any, index: number, target: any) => any'."`;

exports[`$ExpectType Dictionary<number> 10`] = `"Record<\\"a\\" | \\"b\\" | \\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 11`] = `"Record<\\"a\\" | \\"b\\" | \\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 12`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 13`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 14`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`$ExpectType Dictionary<number> 15`] = `
"Argument of type '{ a: number; b: number; c: number; }' is not assignable to parameter of type '{ a: number; c: number; }'.
  Object literal may only specify known properties, and 'b' does not exist in type '{ a: number; c: number; }'."
`;

exports[`$ExpectType Dictionary<number> 16`] = `"Pick<{ a: number; b: number; c: number; }, \\"a\\" | \\"c\\">"`;

exports[`$ExpectType Dictionary<number> 17`] = `
"Type '{ a: number; c: number; }' does not satisfy the constraint 'Record<\\"b\\", any>'.
  Property 'b' is missing in type '{ a: number; c: number; }'."
`;

exports[`$ExpectType Dictionary<number> 18`] = `"{}"`;

exports[`$ExpectType Dictionary<number> 19`] = `"{}"`;

exports[`$ExpectType Dictionary<number> 20`] = `"any"`;

exports[`$ExpectType Dictionary<number> 21`] = `"object"`;

exports[`$ExpectType Dictionary<number> 22`] = `"object"`;

exports[`$ExpectType Dictionary<number> 23`] = `"Partial<{ a: number; b: number; c: number; d: number; e: number; }>"`;

exports[`$ExpectType Dictionary<number> 24`] = `"Partial<{ a: number; b: number; A: number; B: number; }>"`;

exports[`$ExpectType Dictionary<number> 25`] = `"Pick<{ a: number; b: number; c: number; d: number; }, \\"a\\" | \\"d\\">"`;

exports[`$ExpectType Dictionary<number> 26`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 27`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 28`] = `"Dictionary<number>"`;

exports[`$ExpectType Dictionary<number> 29`] = `"Pick<{ a: number; b: number; c: number; d: number; }, \\"a\\" | \\"d\\">"`;

exports[`$ExpectType Dictionary<number> 30`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 31`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 32`] = `"Partial<{ a: number; b: number; c: number; d: number; }>"`;

exports[`$ExpectType Dictionary<number> 33`] = `"Partial<{ a: number; b: number; A: number; B: number; }>"`;

exports[`$ExpectType Dictionary<number> 34`] = `"Dictionary<number>"`;

exports[`$ExpectType Dictionary<number> 35`] = `"Dictionary<number>"`;

exports[`$ExpectType Dictionary<string> 1`] = `"Record<string, string>"`;

exports[`$ExpectType Dictionary<string> 2`] = `"Dictionary<string>"`;

exports[`$ExpectType Dictionary<string> 3`] = `"Dictionary<string>"`;

exports[`$ExpectType Dictionary<string> 4`] = `"Property 'set' does not exist on type 'Lens<any, any>'."`;

exports[`$ExpectType Dictionary<string> 5`] = `"Property 'set' does not exist on type 'Lens<{}, {}>'."`;

exports[`$ExpectType Dictionary<string[]> 1`] = `"Partial<Record<\\"F\\" | \\"D\\" | \\"C\\" | \\"B\\" | \\"A\\", string[]>>"`;

exports[`$ExpectType Dictionary<string[]> 2`] = `"Dictionary<string[]>"`;

exports[`$ExpectType Object 1`] = `"{}"`;

exports[`$ExpectType Object[] 1`] = `"{}[]"`;

exports[`$ExpectType Object[] 2`] = `"{}[]"`;

exports[`$ExpectType Object[] 3`] = `"[Partial<{ a: string; b: string; foo: string; }>, Partial<{ a: string; b: string; foo: string; }>]"`;

exports[`$ExpectType Object[] 4`] = `"{}[]"`;

exports[`$ExpectType Object[] 5`] = `"any[]"`;

exports[`$ExpectType Promise<number> 1`] = `"PromiseLike<number>"`;

exports[`$ExpectType T 1`] = `"{ sum: number; nested: { mul: number; }; }"`;

exports[`$ExpectType Task 1`] = `"{ id: number; }"`;

exports[`$ExpectType Why|boolean 1`] = `"false | Why"`;

exports[`$ExpectType any[] 1`] = `"(string | number)[]"`;

exports[`$ExpectType any[] 2`] = `"void[]"`;

exports[`$ExpectType any[] 3`] = `"void[]"`;

exports[`$ExpectType any[] 4`] = `"void[]"`;

exports[`$ExpectType any[] 5`] = `"{}[]"`;

exports[`$ExpectType any[] 6`] = `"any[]"`;

exports[`$ExpectType any[] 7`] = `"any[]"`;

exports[`$ExpectType any[][] 1`] = `"(string | number)[][]"`;

exports[`$ExpectType any[][] 2`] = `
"Argument of type '(number[] | string[])[]' is not assignable to parameter of type 'List<List<number>>'.
  Type '(number[] | string[])[]' is not assignable to type 'ArrayLike<List<number>>'.
    Index signatures are incompatible.
      Type 'number[] | string[]' is not assignable to type 'List<number>'.
        Type 'string[]' is not assignable to type 'List<number>'.
          Type 'string[]' is not assignable to type 'ArrayLike<number>'.
            Index signatures are incompatible.
              Type 'string' is not assignable to type 'number'."
`;

exports[`$ExpectType boolean 1`] = `"Property 'isArrayLike' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 2`] = `"Property 'isArrayLike' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 3`] = `"Property 'isArrayLike' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 4`] = `"boolean"`;

exports[`$ExpectType boolean 5`] = `"boolean"`;

exports[`$ExpectType boolean 6`] = `"boolean"`;

exports[`$ExpectType boolean 7`] = `"boolean"`;

exports[`$ExpectType boolean 8`] = `"boolean"`;

exports[`$ExpectType boolean 9`] = `"boolean"`;

exports[`$ExpectType boolean 10`] = `"boolean"`;

exports[`$ExpectType boolean 11`] = `"boolean"`;

exports[`$ExpectType boolean 12`] = `"boolean"`;

exports[`$ExpectType boolean 13`] = `"boolean"`;

exports[`$ExpectType boolean 14`] = `"boolean"`;

exports[`$ExpectType boolean 15`] = `"boolean"`;

exports[`$ExpectType boolean 16`] = `"boolean"`;

exports[`$ExpectType boolean 17`] = `"boolean"`;

exports[`$ExpectType boolean 18`] = `"boolean"`;

exports[`$ExpectType boolean 19`] = `"boolean"`;

exports[`$ExpectType boolean 20`] = `"boolean"`;

exports[`$ExpectType boolean 21`] = `"boolean"`;

exports[`$ExpectType boolean 22`] = `"boolean"`;

exports[`$ExpectType boolean 23`] = `"boolean"`;

exports[`$ExpectType boolean 24`] = `"boolean"`;

exports[`$ExpectType boolean 25`] = `"boolean"`;

exports[`$ExpectType boolean 26`] = `"boolean"`;

exports[`$ExpectType boolean 27`] = `"boolean"`;

exports[`$ExpectType boolean 28`] = `"boolean"`;

exports[`$ExpectType boolean 29`] = `"boolean"`;

exports[`$ExpectType boolean 30`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 31`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 32`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 33`] = `"boolean"`;

exports[`$ExpectType boolean 34`] = `"boolean"`;

exports[`$ExpectType boolean 35`] = `"boolean"`;

exports[`$ExpectType boolean 36`] = `"Type 'boolean' does not satisfy the constraint 'Function'."`;

exports[`$ExpectType boolean 37`] = `"Type 'boolean' does not satisfy the constraint 'Function'."`;

exports[`$ExpectType boolean 38`] = `"boolean"`;

exports[`$ExpectType boolean 39`] = `"boolean"`;

exports[`$ExpectType boolean 40`] = `"boolean"`;

exports[`$ExpectType boolean 41`] = `"boolean"`;

exports[`$ExpectType boolean 42`] = `"boolean"`;

exports[`$ExpectType boolean 43`] = `"boolean"`;

exports[`$ExpectType boolean 44`] = `"boolean"`;

exports[`$ExpectType boolean 45`] = `"boolean"`;

exports[`$ExpectType boolean 46`] = `"boolean"`;

exports[`$ExpectType boolean 47`] = `"boolean"`;

exports[`$ExpectType boolean 48`] = `"boolean"`;

exports[`$ExpectType boolean 49`] = `"boolean"`;

exports[`$ExpectType boolean 50`] = `"boolean"`;

exports[`$ExpectType boolean 51`] = `"boolean"`;

exports[`$ExpectType boolean 52`] = `"boolean"`;

exports[`$ExpectType boolean 53`] = `"boolean"`;

exports[`$ExpectType boolean 54`] = `"boolean"`;

exports[`$ExpectType boolean 55`] = `"boolean"`;

exports[`$ExpectType boolean 56`] = `"boolean"`;

exports[`$ExpectType boolean 57`] = `"boolean"`;

exports[`$ExpectType boolean 58`] = `"boolean"`;

exports[`$ExpectType boolean 59`] = `
"Argument of type '{ x: number; y: number; }' is not assignable to parameter of type 'Record<\\"x\\", any>'.
  Object literal may only specify known properties, and 'y' does not exist in type 'Record<\\"x\\", any>'."
`;

exports[`$ExpectType boolean 60`] = `"Argument of type '\\"x\\"' is not assignable to parameter of type 'never'."`;

exports[`$ExpectType boolean 61`] = `
"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<number, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type 'number' is not assignable to type 'Morphism<number, boolean>'."
`;

exports[`$ExpectType boolean 62`] = `
"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<string | number | boolean, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type 'number' is not assignable to type 'Morphism<string | number | boolean, boolean>'."
`;

exports[`$ExpectType boolean 63`] = `
"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<{}, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type 'number' is not assignable to type 'Morphism<{}, boolean>'."
`;

exports[`$ExpectType boolean 64`] = `"Argument of type '{ x: number; }' is not assignable to parameter of type 'Dictionary<Morphism<{}, boolean>>'."`;

exports[`$ExpectType boolean 65`] = `
"Argument of type '{ x: (val: number, obj: any) => boolean; }' is not assignable to parameter of type 'Dictionary<Morphism<number, boolean>>'.
  Property 'x' is incompatible with index signature.
    Type '(val: number, obj: any) => boolean' is not assignable to type 'Morphism<number, boolean>'."
`;

exports[`$ExpectType boolean 66`] = `"Argument of type '{ x: (val: number, obj: any) => boolean; }' is not assignable to parameter of type 'Dictionary<Morphism<number, boolean>>'."`;

exports[`$ExpectType boolean 67`] = `"boolean"`;

exports[`$ExpectType boolean 68`] = `"boolean"`;

exports[`$ExpectType boolean 69`] = `"boolean"`;

exports[`$ExpectType boolean 70`] = `"boolean"`;

exports[`$ExpectType boolean 71`] = `"boolean"`;

exports[`$ExpectType boolean 72`] = `"boolean"`;

exports[`$ExpectType boolean 73`] = `"boolean"`;

exports[`$ExpectType boolean 74`] = `"boolean"`;

exports[`$ExpectType boolean 75`] = `"boolean"`;

exports[`$ExpectType boolean 76`] = `"boolean"`;

exports[`$ExpectType boolean 77`] = `"boolean"`;

exports[`$ExpectType boolean 78`] = `"boolean"`;

exports[`$ExpectType boolean 79`] = `"boolean"`;

exports[`$ExpectType boolean 80`] = `"boolean"`;

exports[`$ExpectType boolean 81`] = `"boolean"`;

exports[`$ExpectType boolean 82`] = `"boolean"`;

exports[`$ExpectType boolean 83`] = `"boolean"`;

exports[`$ExpectType boolean 84`] = `"boolean"`;

exports[`$ExpectType boolean 85`] = `"boolean"`;

exports[`$ExpectType boolean 86`] = `"boolean"`;

exports[`$ExpectType boolean 87`] = `"boolean"`;

exports[`$ExpectType boolean 88`] = `"boolean"`;

exports[`$ExpectType boolean 89`] = `"boolean"`;

exports[`$ExpectType boolean 90`] = `"boolean"`;

exports[`$ExpectType boolean 91`] = `"boolean"`;

exports[`$ExpectType boolean 92`] = `"boolean"`;

exports[`$ExpectType boolean 93`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 94`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 95`] = `"Property 'isNaN' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType boolean 96`] = `"boolean"`;

exports[`$ExpectType boolean 97`] = `"boolean"`;

exports[`$ExpectType boolean 98`] = `"boolean"`;

exports[`$ExpectType boolean 99`] = `"boolean"`;

exports[`$ExpectType boolean 100`] = `"boolean"`;

exports[`$ExpectType boolean 101`] = `"boolean"`;

exports[`$ExpectType boolean 102`] = `"boolean"`;

exports[`$ExpectType boolean 103`] = `"boolean"`;

exports[`$ExpectType boolean 104`] = `"boolean"`;

exports[`$ExpectType boolean 105`] = `"boolean"`;

exports[`$ExpectType boolean 106`] = `"boolean"`;

exports[`$ExpectType boolean 107`] = `"boolean"`;

exports[`$ExpectType boolean 108`] = `"boolean"`;

exports[`$ExpectType boolean 109`] = `"boolean"`;

exports[`$ExpectType boolean 110`] = `"boolean"`;

exports[`$ExpectType boolean 111`] = `"boolean"`;

exports[`$ExpectType boolean 112`] = `"boolean"`;

exports[`$ExpectType boolean 113`] = `"boolean"`;

exports[`$ExpectType boolean 114`] = `"boolean"`;

exports[`$ExpectType boolean 115`] = `"boolean"`;

exports[`$ExpectType boolean 116`] = `"boolean"`;

exports[`$ExpectType boolean 117`] = `"boolean"`;

exports[`$ExpectType boolean 118`] = `"boolean"`;

exports[`$ExpectType boolean 119`] = `"boolean"`;

exports[`$ExpectType boolean 120`] = `"boolean"`;

exports[`$ExpectType boolean 121`] = `"boolean"`;

exports[`$ExpectType boolean 122`] = `"boolean"`;

exports[`$ExpectType boolean 123`] = `"boolean"`;

exports[`$ExpectType boolean 124`] = `"boolean"`;

exports[`$ExpectType boolean 125`] = `"any"`;

exports[`$ExpectType boolean 126`] = `"boolean"`;

exports[`$ExpectType boolean 127`] = `"boolean"`;

exports[`$ExpectType boolean 128`] = `"boolean"`;

exports[`$ExpectType boolean 129`] = `"boolean"`;

exports[`$ExpectType boolean 130`] = `"boolean"`;

exports[`$ExpectType boolean 131`] = `"boolean"`;

exports[`$ExpectType boolean 132`] = `"boolean"`;

exports[`$ExpectType boolean 133`] = `"boolean"`;

exports[`$ExpectType boolean 134`] = `"boolean"`;

exports[`$ExpectType boolean 135`] = `"boolean"`;

exports[`$ExpectType boolean 136`] = `"boolean"`;

exports[`$ExpectType boolean 137`] = `"boolean"`;

exports[`$ExpectType boolean 138`] = `"boolean"`;

exports[`$ExpectType boolean 139`] = `"boolean"`;

exports[`$ExpectType boolean 140`] = `"boolean"`;

exports[`$ExpectType boolean 141`] = `"boolean"`;

exports[`$ExpectType boolean 142`] = `"boolean"`;

exports[`$ExpectType boolean 143`] = `"boolean"`;

exports[`$ExpectType boolean 144`] = `"boolean"`;

exports[`$ExpectType boolean 145`] = `"boolean"`;

exports[`$ExpectType boolean 146`] = `"boolean"`;

exports[`$ExpectType boolean 147`] = `"boolean"`;

exports[`$ExpectType boolean 148`] = `"boolean"`;

exports[`$ExpectType circle 1`] = `"R"`;

exports[`$ExpectType circle 2`] = `"R"`;

exports[`$ExpectType null 1`] = `"\\"\\" | null"`;

exports[`$ExpectType null 2`] = `"{} | undefined"`;

exports[`$ExpectType number 1`] = `"number"`;

exports[`$ExpectType number 2`] = `"number"`;

exports[`$ExpectType number 3`] = `"number"`;

exports[`$ExpectType number 4`] = `"number"`;

exports[`$ExpectType number 5`] = `"number"`;

exports[`$ExpectType number 6`] = `"number"`;

exports[`$ExpectType number 7`] = `"number"`;

exports[`$ExpectType number 8`] = `"number"`;

exports[`$ExpectType number 9`] = `"number"`;

exports[`$ExpectType number 10`] = `"any"`;

exports[`$ExpectType number 11`] = `"number"`;

exports[`$ExpectType number 12`] = `"number"`;

exports[`$ExpectType number 13`] = `"number"`;

exports[`$ExpectType number 14`] = `"number"`;

exports[`$ExpectType number 15`] = `"number"`;

exports[`$ExpectType number 16`] = `"number"`;

exports[`$ExpectType number 17`] = `"number"`;

exports[`$ExpectType number 18`] = `"number"`;

exports[`$ExpectType number 19`] = `"number"`;

exports[`$ExpectType number 20`] = `"number"`;

exports[`$ExpectType number 21`] = `"number"`;

exports[`$ExpectType number 22`] = `"number"`;

exports[`$ExpectType number 23`] = `"number"`;

exports[`$ExpectType number 24`] = `"number"`;

exports[`$ExpectType number 25`] = `"number"`;

exports[`$ExpectType number 26`] = `"number"`;

exports[`$ExpectType number 27`] = `"number"`;

exports[`$ExpectType number 28`] = `"number"`;

exports[`$ExpectType number 29`] = `"1 | -1 | 10"`;

exports[`$ExpectType number 30`] = `"number"`;

exports[`$ExpectType number 31`] = `"number"`;

exports[`$ExpectType number 32`] = `"number"`;

exports[`$ExpectType number 33`] = `"number"`;

exports[`$ExpectType number 34`] = `"number"`;

exports[`$ExpectType number 35`] = `"number"`;

exports[`$ExpectType number 36`] = `"number"`;

exports[`$ExpectType number 37`] = `"number"`;

exports[`$ExpectType number 38`] = `"number"`;

exports[`$ExpectType number 39`] = `"number"`;

exports[`$ExpectType number 40`] = `"number"`;

exports[`$ExpectType number 41`] = `"number"`;

exports[`$ExpectType number 42`] = `
"Argument of type 'number[]' is not assignable to parameter of type '(value: {}) => Functor<{}>'.
  Type 'number[]' provides no match for the signature '(value: {}): Functor<{}>'."
`;

exports[`$ExpectType number 43`] = `"number"`;

exports[`$ExpectType number 44`] = `"number"`;

exports[`$ExpectType number 45`] = `"number"`;

exports[`$ExpectType number 46`] = `"number"`;

exports[`$ExpectType number 47`] = `"number"`;

exports[`$ExpectType number 48`] = `"<T>(lens: Lens<T, { x: number; y: number; }>) => T"`;

exports[`$ExpectType number 49`] = `"{}"`;

exports[`$ExpectType number 50`] = `"{}"`;

exports[`$ExpectType number 51`] = `"{} | \\"N/A\\""`;

exports[`$ExpectType number 52`] = `"string | {}"`;

exports[`$ExpectType number 53`] = `"{} | \\"N/A\\""`;

exports[`$ExpectType number 54`] = `"{} | { c: number; }"`;

exports[`$ExpectType number 55`] = `"number"`;

exports[`$ExpectType number 56`] = `"number"`;

exports[`$ExpectType number 57`] = `"number"`;

exports[`$ExpectType number 58`] = `"number"`;

exports[`$ExpectType number 59`] = `"number"`;

exports[`$ExpectType number 60`] = `"number"`;

exports[`$ExpectType number 61`] = `"number"`;

exports[`$ExpectType number 62`] = `"number"`;

exports[`$ExpectType number 63`] = `"number"`;

exports[`$ExpectType number 64`] = `"number"`;

exports[`$ExpectType number 65`] = `"number"`;

exports[`$ExpectType number 66`] = `"number"`;

exports[`$ExpectType number 67`] = `"number"`;

exports[`$ExpectType number 68`] = `"number"`;

exports[`$ExpectType number 69`] = `"number"`;

exports[`$ExpectType number 70`] = `"number"`;

exports[`$ExpectType number 71`] = `"number"`;

exports[`$ExpectType number 72`] = `"{} | undefined"`;

exports[`$ExpectType number 73`] = `"number"`;

exports[`$ExpectType number 74`] = `"number"`;

exports[`$ExpectType number 75`] = `"number"`;

exports[`$ExpectType number 76`] = `"number"`;

exports[`$ExpectType number 77`] = `"number"`;

exports[`$ExpectType number 78`] = `"number"`;

exports[`$ExpectType number 79`] = `"number"`;

exports[`$ExpectType number 80`] = `"number"`;

exports[`$ExpectType number 81`] = `"number"`;

exports[`$ExpectType number 82`] = `"number"`;

exports[`$ExpectType number 83`] = `"number"`;

exports[`$ExpectType number 84`] = `"number"`;

exports[`$ExpectType number 85`] = `"number"`;

exports[`$ExpectType number 86`] = `"number"`;

exports[`$ExpectType number 87`] = `"number"`;

exports[`$ExpectType number 88`] = `"3 | 7"`;

exports[`$ExpectType number 89`] = `"number"`;

exports[`$ExpectType number 90`] = `"number"`;

exports[`$ExpectType number 91`] = `"number"`;

exports[`$ExpectType number 92`] = `"number"`;

exports[`$ExpectType number 93`] = `"3 | 9"`;

exports[`$ExpectType number 94`] = `"number"`;

exports[`$ExpectType number 95`] = `"number"`;

exports[`$ExpectType number 96`] = `"number"`;

exports[`$ExpectType number 97`] = `"number"`;

exports[`$ExpectType number 98`] = `"number"`;

exports[`$ExpectType number 99`] = `"number"`;

exports[`$ExpectType number 100`] = `"number"`;

exports[`$ExpectType number 101`] = `"number"`;

exports[`$ExpectType number 102`] = `"number"`;

exports[`$ExpectType number 103`] = `"number"`;

exports[`$ExpectType number 104`] = `"number"`;

exports[`$ExpectType number 105`] = `"number"`;

exports[`$ExpectType number 106`] = `"number"`;

exports[`$ExpectType number 107`] = `"number"`;

exports[`$ExpectType number 108`] = `"number"`;

exports[`$ExpectType number 109`] = `"never[] | 0"`;

exports[`$ExpectType number 110`] = `"number | never[]"`;

exports[`$ExpectType number 111`] = `"number"`;

exports[`$ExpectType number 112`] = `"number"`;

exports[`$ExpectType number 113`] = `"number"`;

exports[`$ExpectType number 114`] = `"{}"`;

exports[`$ExpectType number 115`] = `"number"`;

exports[`$ExpectType number 116`] = `"number"`;

exports[`$ExpectType number 117`] = `"number"`;

exports[`$ExpectType number 118`] = `"number"`;

exports[`$ExpectType number[] 1`] = `
"Argument of type 'number[]' is not assignable to parameter of type 'Morphism<{}, boolean>'.
  Type 'number[]' provides no match for the signature '(value: {}): boolean'."
`;

exports[`$ExpectType number[] 2`] = `"Argument of type '1' is not assignable to parameter of type 'Morphism<{}, boolean>'."`;

exports[`$ExpectType number[] 3`] = `"number[]"`;

exports[`$ExpectType number[] 4`] = `"number[]"`;

exports[`$ExpectType number[] 5`] = `"number[]"`;

exports[`$ExpectType number[] 6`] = `"number[]"`;

exports[`$ExpectType number[] 7`] = `"number[]"`;

exports[`$ExpectType number[] 8`] = `"number[]"`;

exports[`$ExpectType number[] 9`] = `"number[]"`;

exports[`$ExpectType number[] 10`] = `"number[]"`;

exports[`$ExpectType number[] 11`] = `"any"`;

exports[`$ExpectType number[] 12`] = `"number[]"`;

exports[`$ExpectType number[] 13`] = `"number[]"`;

exports[`$ExpectType number[] 14`] = `"number[]"`;

exports[`$ExpectType number[] 15`] = `
"Argument of type '(n: number) => false | number[]' is not assignable to parameter of type '(seed: number) => false | [{}, number]'.
  Type 'false | number[]' is not assignable to type 'false | [{}, number]'.
    Type 'number[]' is not assignable to type 'false | [{}, number]'.
      Type 'number[]' is not assignable to type '[{}, number]'.
        Property '0' is missing in type 'number[]'."
`;

exports[`$ExpectType number[] 16`] = `"R[]"`;

exports[`$ExpectType number[] 17`] = `"number[]"`;

exports[`$ExpectType number[] 18`] = `"number[]"`;

exports[`$ExpectType number[] 19`] = `"number[]"`;

exports[`$ExpectType number[] 20`] = `"number[]"`;

exports[`$ExpectType number[] 21`] = `"Cannot invoke an expression whose type lacks a call signature. Type 'any[]' has no compatible call signatures."`;

exports[`$ExpectType number[] 22`] = `"Cannot invoke an expression whose type lacks a call signature. Type 'any[]' has no compatible call signatures."`;

exports[`$ExpectType number[] 23`] = `"number[]"`;

exports[`$ExpectType number[] 24`] = `"number[]"`;

exports[`$ExpectType number[] 25`] = `"number[]"`;

exports[`$ExpectType number[] 26`] = `"number[]"`;

exports[`$ExpectType number[] 27`] = `"number[]"`;

exports[`$ExpectType number[] 28`] = `"number[]"`;

exports[`$ExpectType number[] 29`] = `"number[]"`;

exports[`$ExpectType number[] 30`] = `"number[]"`;

exports[`$ExpectType number[] 31`] = `"number[]"`;

exports[`$ExpectType number[] 32`] = `"any"`;

exports[`$ExpectType number[] 33`] = `"any"`;

exports[`$ExpectType number[] 34`] = `"number"`;

exports[`$ExpectType number[] 35`] = `"number[]"`;

exports[`$ExpectType number[] 36`] = `"number[]"`;

exports[`$ExpectType number[] 37`] = `"any"`;

exports[`$ExpectType number[] 38`] = `"number[]"`;

exports[`$ExpectType number[] 39`] = `"number[]"`;

exports[`$ExpectType number[] 40`] = `"number[]"`;

exports[`$ExpectType number[] 41`] = `"number[]"`;

exports[`$ExpectType number[] 42`] = `"number[]"`;

exports[`$ExpectType number[] 43`] = `"number[]"`;

exports[`$ExpectType number[] 44`] = `"number[]"`;

exports[`$ExpectType number[] 45`] = `"number[]"`;

exports[`$ExpectType number[] 46`] = `"number[]"`;

exports[`$ExpectType number[] 47`] = `"number[]"`;

exports[`$ExpectType number[] 48`] = `"number[]"`;

exports[`$ExpectType number[] 49`] = `"number[]"`;

exports[`$ExpectType number[] 50`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 51`] = `
"Argument of type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to parameter of type 'Morphism<any[], never[]> | ((transformer: Transformer<any, never[], never[]>) => (accumulator: ne...'.
  Type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to type '(transformer: Transformer<any, never[], never[]>) => (accumulator: never[], value: any) => never[...'.
    Types of parameters 'v1' and 'transformer' are incompatible.
      Type 'Transformer<any, never[], never[]>' is not assignable to type 'string | any[] | ArrayLike<any>'.
        Type 'Transformer<any, never[], never[]>' is not assignable to type 'ArrayLike<any>'.
          Property 'length' is missing in type 'Transformer<any, never[], never[]>'."
`;

exports[`$ExpectType number[] 52`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 53`] = `
"Argument of type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to parameter of type 'Morphism<any[], never[]> | ((transformer: Transformer<any, never[], never[]>) => (accumulator: ne...'.
  Type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to type '(transformer: Transformer<any, never[], never[]>) => (accumulator: never[], value: any) => never[...'."
`;

exports[`$ExpectType number[] 54`] = `
"Argument of type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to parameter of type 'Morphism<any[], never[]> | ((transformer: Transformer<any, never[], never[]>) => (accumulator: ne...'.
  Type '(v1: string | any[] | ArrayLike<any>) => map_mixed_11<number, any>' is not assignable to type '(transformer: Transformer<any, never[], never[]>) => (accumulator: never[], value: any) => never[...'.
    Types of parameters 'v1' and 'transformer' are incompatible.
      Type 'Transformer<any, never[], never[]>' is not assignable to type 'string | any[] | ArrayLike<any>'.
        Type 'Transformer<any, never[], never[]>' is not assignable to type 'ArrayLike<any>'."
`;

exports[`$ExpectType number[] 55`] = `"number[]"`;

exports[`$ExpectType number[] 56`] = `"number[]"`;

exports[`$ExpectType number[] 57`] = `"any[] | Functor<any> | Record<any, any>"`;

exports[`$ExpectType number[] 58`] = `"any[] | Functor<any> | Record<any, any>"`;

exports[`$ExpectType number[] 59`] = `"number[]"`;

exports[`$ExpectType number[] 60`] = `"number[]"`;

exports[`$ExpectType number[] 61`] = `"number[]"`;

exports[`$ExpectType number[] 62`] = `"number[]"`;

exports[`$ExpectType number[] 63`] = `"number[]"`;

exports[`$ExpectType number[] 64`] = `"number[]"`;

exports[`$ExpectType number[] 65`] = `"number[]"`;

exports[`$ExpectType number[] 66`] = `"number[]"`;

exports[`$ExpectType number[] 67`] = `"any"`;

exports[`$ExpectType number[] 68`] = `"any"`;

exports[`$ExpectType number[] 69`] = `"number[]"`;

exports[`$ExpectType number[] 70`] = `"number[]"`;

exports[`$ExpectType number[] 71`] = `"number[]"`;

exports[`$ExpectType number[] 72`] = `"number[]"`;

exports[`$ExpectType number[] 73`] = `"number[]"`;

exports[`$ExpectType number[] 74`] = `"number[]"`;

exports[`$ExpectType number[] 75`] = `"never[]"`;

exports[`$ExpectType number[] 76`] = `"number[]"`;

exports[`$ExpectType number[] 77`] = `"number[]"`;

exports[`$ExpectType number[] 78`] = `"number[]"`;

exports[`$ExpectType number[] 79`] = `"number[]"`;

exports[`$ExpectType number[] 80`] = `"number[]"`;

exports[`$ExpectType number[] 81`] = `"number[]"`;

exports[`$ExpectType number[] 82`] = `"number[]"`;

exports[`$ExpectType number[] 83`] = `"number[]"`;

exports[`$ExpectType number[] 84`] = `"number[]"`;

exports[`$ExpectType number[] 85`] = `"number[]"`;

exports[`$ExpectType number[] 86`] = `"number[]"`;

exports[`$ExpectType number[] 87`] = `"number[]"`;

exports[`$ExpectType number[] 88`] = `"number[]"`;

exports[`$ExpectType number[] 89`] = `"number[]"`;

exports[`$ExpectType number[] 90`] = `"number[]"`;

exports[`$ExpectType number[] 91`] = `"number[]"`;

exports[`$ExpectType number[] 92`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 93`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 94`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 95`] = `"number[] | Functor<number> | Record<any, number>"`;

exports[`$ExpectType number[] 96`] = `"number[]"`;

exports[`$ExpectType number[] 97`] = `"any[]"`;

exports[`$ExpectType number[] 98`] = `"any[]"`;

exports[`$ExpectType number[] 99`] = `"any[]"`;

exports[`$ExpectType number[] 100`] = `"number[]"`;

exports[`$ExpectType number[] 101`] = `"number[]"`;

exports[`$ExpectType number[] 102`] = `"number[]"`;

exports[`$ExpectType number[] 103`] = `"Property 'mapIndexed' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType number[] 104`] = `"number[]"`;

exports[`$ExpectType number[] 105`] = `"number[]"`;

exports[`$ExpectType number[] 106`] = `"number[]"`;

exports[`$ExpectType number[] 107`] = `"number[]"`;

exports[`$ExpectType number[] 108`] = `"number[]"`;

exports[`$ExpectType number[] 109`] = `"number[]"`;

exports[`$ExpectType number[] 110`] = `"number[]"`;

exports[`$ExpectType number[] 111`] = `"number[]"`;

exports[`$ExpectType number[] 112`] = `"number[]"`;

exports[`$ExpectType number[] 113`] = `"number[]"`;

exports[`$ExpectType number[] 114`] = `"number[]"`;

exports[`$ExpectType number[] 115`] = `"{}[]"`;

exports[`$ExpectType number[] 116`] = `"(number | (number | (number | number[])[])[])[]"`;

exports[`$ExpectType number[][] 1`] = `"number[][]"`;

exports[`$ExpectType number[][] 2`] = `"number[][]"`;

exports[`$ExpectType number[][] 3`] = `"number[][]"`;

exports[`$ExpectType number[][] 4`] = `"number[][]"`;

exports[`$ExpectType number[][] 5`] = `"number[][]"`;

exports[`$ExpectType number[][] 6`] = `"number[][]"`;

exports[`$ExpectType number[][] 7`] = `"number[][]"`;

exports[`$ExpectType number[][] 8`] = `"number[][]"`;

exports[`$ExpectType number[][] 9`] = `"[number[], number[]]"`;

exports[`$ExpectType number[][] 10`] = `"[number[], number[]]"`;

exports[`$ExpectType number[][] 11`] = `"[number, number]"`;

exports[`$ExpectType number[][] 12`] = `"[number, number]"`;

exports[`$ExpectType number|any[] 1`] = `"never[] | 0"`;

exports[`$ExpectType number|any[] 2`] = `"number | never[]"`;

exports[`$ExpectType string 1`] = `"string"`;

exports[`$ExpectType string 2`] = `"\\"Number\\""`;

exports[`$ExpectType string 3`] = `"\\"Boolean\\""`;

exports[`$ExpectType string 4`] = `"\\"String\\""`;

exports[`$ExpectType string 5`] = `"\\"Null\\""`;

exports[`$ExpectType string 6`] = `"string"`;

exports[`$ExpectType string 7`] = `"string"`;

exports[`$ExpectType string 8`] = `"\\"a\\" | \\"b\\" | \\"c\\""`;

exports[`$ExpectType string 9`] = `"\\"a\\" | \\"b\\" | \\"c\\""`;

exports[`$ExpectType string 10`] = `"string"`;

exports[`$ExpectType string 11`] = `"string | Record<\\"length\\", any>"`;

exports[`$ExpectType string 12`] = `"string | Record<\\"length\\", any>"`;

exports[`$ExpectType string 13`] = `"string"`;

exports[`$ExpectType string 14`] = `"any"`;

exports[`$ExpectType string 15`] = `"Expected 0-2 arguments, but got 3."`;

exports[`$ExpectType string 16`] = `"Expected 0-2 arguments, but got 4."`;

exports[`$ExpectType string 17`] = `"string"`;

exports[`$ExpectType string 18`] = `"string"`;

exports[`$ExpectType string 19`] = `"string"`;

exports[`$ExpectType string 20`] = `"\\"a\\" | \\"d\\" | \\"e\\""`;

exports[`$ExpectType string 21`] = `"string"`;

exports[`$ExpectType string 22`] = `"string"`;

exports[`$ExpectType string 23`] = `"string"`;

exports[`$ExpectType string 24`] = `"string"`;

exports[`$ExpectType string 25`] = `"string"`;

exports[`$ExpectType string 26`] = `"string"`;

exports[`$ExpectType string 27`] = `"string"`;

exports[`$ExpectType string 28`] = `"string"`;

exports[`$ExpectType string 29`] = `"string"`;

exports[`$ExpectType string 30`] = `"string | undefined"`;

exports[`$ExpectType string 31`] = `"{}"`;

exports[`$ExpectType string 32`] = `"string | undefined"`;

exports[`$ExpectType string 33`] = `"string | undefined"`;

exports[`$ExpectType string 34`] = `"string"`;

exports[`$ExpectType string 35`] = `"string"`;

exports[`$ExpectType string 36`] = `"string"`;

exports[`$ExpectType string 37`] = `"string"`;

exports[`$ExpectType string 38`] = `"string"`;

exports[`$ExpectType string 39`] = `"string"`;

exports[`$ExpectType string 40`] = `"string"`;

exports[`$ExpectType string 41`] = `"string"`;

exports[`$ExpectType string 42`] = `"string"`;

exports[`$ExpectType string 43`] = `"string"`;

exports[`$ExpectType string 44`] = `"string"`;

exports[`$ExpectType string 45`] = `"string"`;

exports[`$ExpectType string 46`] = `"string"`;

exports[`$ExpectType string 47`] = `"string"`;

exports[`$ExpectType string 48`] = `"string"`;

exports[`$ExpectType string 49`] = `"string"`;

exports[`$ExpectType string 50`] = `"{}"`;

exports[`$ExpectType string 51`] = `
"Argument of type '{ phrase: string; }' is not assignable to parameter of type '(value: any) => Functor<any>'.
  Type '{ phrase: string; }' provides no match for the signature '(value: any): Functor<any>'."
`;

exports[`$ExpectType string 52`] = `
"Argument of type '{ phrase: string; }' is not assignable to parameter of type '(value: any) => Functor<any>'.
  Type '{ phrase: string; }' provides no match for the signature '(value: any): Functor<any>'."
`;

exports[`$ExpectType string 53`] = `
"Argument of type '{ phrase: string; }' is not assignable to parameter of type '(value: {}) => Functor<{}>'.
  Type '{ phrase: string; }' provides no match for the signature '(value: {}): Functor<{}>'."
`;

exports[`$ExpectType string 54`] = `
"Argument of type '{ phrase: string; }' is not assignable to parameter of type '(value: {}) => Functor<{}>'.
  Type '{ phrase: string; }' provides no match for the signature '(value: {}): Functor<{}>'."
`;

exports[`$ExpectType string 55`] = `"\\"foo\\""`;

exports[`$ExpectType string 56`] = `"Argument of type '{ name: string; age: number; }' is not assignable to parameter of type 'Record<\\"favoriteLibrary\\", any>'."`;

exports[`$ExpectType string 57`] = `"string"`;

exports[`$ExpectType string 58`] = `"string"`;

exports[`$ExpectType string 59`] = `"\\"a\\" | \\"z\\""`;

exports[`$ExpectType string 60`] = `"\\"a\\" | \\"z\\""`;

exports[`$ExpectType string 61`] = `"string"`;

exports[`$ExpectType string 62`] = `"string"`;

exports[`$ExpectType string 63`] = `"string"`;

exports[`$ExpectType string 64`] = `"string"`;

exports[`$ExpectType string 65`] = `"string"`;

exports[`$ExpectType string 66`] = `"string"`;

exports[`$ExpectType string 67`] = `"string"`;

exports[`$ExpectType string 68`] = `"number | \\"Ramda\\""`;

exports[`$ExpectType string 69`] = `"\\"\\" | null"`;

exports[`$ExpectType string[] 1`] = `"any[]"`;

exports[`$ExpectType string[] 2`] = `"string[]"`;

exports[`$ExpectType string[] 3`] = `"string[]"`;

exports[`$ExpectType string[] 4`] = `"string[]"`;

exports[`$ExpectType string[] 5`] = `"string[]"`;

exports[`$ExpectType string[] 6`] = `"string[]"`;

exports[`$ExpectType string[] 7`] = `"string[]"`;

exports[`$ExpectType string[] 8`] = `"string[]"`;

exports[`$ExpectType string[] 9`] = `"string[]"`;

exports[`$ExpectType string[] 10`] = `"string[]"`;

exports[`$ExpectType string[] 11`] = `"{}[] | ArrayLike<{}>"`;

exports[`$ExpectType string[] 12`] = `"{}[] | ArrayLike<{}>"`;

exports[`$ExpectType string[] 13`] = `"string[]"`;

exports[`$ExpectType string[] 14`] = `"string[]"`;

exports[`$ExpectType string[] 15`] = `"string[]"`;

exports[`$ExpectType string[] 16`] = `"string[]"`;

exports[`$ExpectType string[] 17`] = `"string[]"`;

exports[`$ExpectType string[] 18`] = `"string[]"`;

exports[`$ExpectType string[] 19`] = `"string[]"`;

exports[`$ExpectType string[] 20`] = `"any[]"`;

exports[`$ExpectType string[] 21`] = `"(\\"a\\" | \\"b\\" | \\"c\\")[]"`;

exports[`$ExpectType string[] 22`] = `"(\\"x\\" | \\"y\\")[]"`;

exports[`$ExpectType string[] 23`] = `"{}[] | ArrayLike<{}>"`;

exports[`$ExpectType string[] 24`] = `"{}[] | ArrayLike<{}>"`;

exports[`$ExpectType string[] 25`] = `"(\\"a\\" | \\"b\\" | \\"c\\")[]"`;

exports[`$ExpectType string[] 26`] = `"(\\"x\\" | \\"y\\")[]"`;

exports[`$ExpectType string[] 27`] = `"{}[] | ArrayLike<{}>"`;

exports[`$ExpectType string[] 28`] = `"string[]"`;

exports[`$ExpectType string[] 29`] = `"any"`;

exports[`$ExpectType string[] 30`] = `"Property 'mapIndexed' does not exist on type 'typeof \\"/Users/ikatyang/Documents/GitHub/types-ramda/ramda/dist/index\\"'."`;

exports[`$ExpectType string[] 31`] = `"Expected 0-2 arguments, but got 3."`;

exports[`$ExpectType string[] 32`] = `"string[]"`;

exports[`$ExpectType string[] 33`] = `"[string, string]"`;

exports[`$ExpectType string[] 34`] = `"[string, string]"`;

exports[`$ExpectType string[] 35`] = `"string[]"`;

exports[`$ExpectType string[] 36`] = `"{}[]"`;

exports[`$ExpectType string[][] 1`] = `"string[][] | Functor<string[]> | Record<any, string[]>"`;

exports[`$ExpectType typeof people 1`] = `"any"`;

exports[`$ExpectType typeof people 2`] = `"any"`;

exports[`$ExpectType typeof people 3`] = `"{}[]"`;

exports[`$ExpectType typeof people 4`] = `"{}[]"`;

exports[`$ExpectType typeof tomato 1`] = `
"Argument of type '{ firstName: string; data: { elapsed: number; remaining: number; }; id: number; }' is not assignable to parameter of type '{ firstName: string; lastName: string; data: { elapsed: number; remaining: number; }; }'.
  Property 'lastName' is missing in type '{ firstName: string; data: { elapsed: number; remaining: number; }; id: number; }'."
`;

exports[`$ExpectType typeof tomato 2`] = `
"Argument of type '{ firstName: string; data: { elapsed: number; remaining: number; }; id: number; }' is not assignable to parameter of type '{ firstName: string; lastName: string; data: { elapsed: number; remaining: number; }; }'.
  Property 'lastName' is missing in type '{ firstName: string; data: { elapsed: number; remaining: number; }; id: number; }'."
`;

exports[`$ExpectType undefined 1`] = `"{} | undefined"`;

exports[`$ExpectType undefined 2`] = `"{} | undefined"`;

exports[`$ExpectType undefined 3`] = `"string | undefined"`;

exports[`$ExpectType undefined 4`] = `"string | undefined"`;

exports[`$ExpectType undefined 5`] = `
"Argument of type '{ name: string; age: number; }' is not assignable to parameter of type 'Record<\\"favoriteLibrary\\", any>'.
  Property 'favoriteLibrary' is missing in type '{ name: string; age: number; }'."
`;
