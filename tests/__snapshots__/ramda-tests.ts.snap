// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`R.and(false, true) 1`] = `"boolean"`;

exports[`R.append('tests')(['write', 'more']) 1`] = `"string[]"`;

exports[`R.append('tests', ['write', 'more']) 1`] = `"string[]"`;

exports[`R.append('tests', []) 1`] = `"string[]"`;

exports[`R.chain(duplicate)([1, 2, 3]) 1`] = `"number[]"`;

exports[`R.chain(duplicate, [1, 2, 3]) 1`] = `"number[]"`;

exports[`R.clamp(1)(10, 4) 1`] = `"number"`;

exports[`R.clamp(1, 10)(11) 1`] = `"number"`;

exports[`R.clone('foo') 1`] = `"\\"foo\\""`;

exports[`R.clone([1,2,3]) 1`] = `"number[]"`;

exports[`R.clone(10) 1`] = `"10"`;

exports[`R.clone(Date.now()) 1`] = `"number"`;

exports[`R.compose(limit10, double) 1`] = `"(x0: number) => boolean"`;

exports[`R.compose(limit10, double)(10) 1`] = `"boolean"`;

exports[`R.drop(3)([1,2,3,4,5,6,7]) 1`] = `"number[]"`;

exports[`R.drop(3, [1,2,3,4,5,6,7]) 1`] = `"number[]"`;

exports[`R.dropLast(1, ['foo', 'bar', 'baz']) 1`] = `"string[]"`;

exports[`R.dropLast(2)(['foo', 'bar', 'baz']) 1`] = `"string[]"`;

exports[`R.empty([1, 2, 3]) 1`] = `"number[]"`;

exports[`R.empty([1,2,3,4,5]) 1`] = `"number[]"`;

exports[`R.eqProps('a', o1, o2) 1`] = `"boolean"`;

exports[`R.eqProps('c', o1, o2) 1`] = `"boolean"`;

exports[`R.equals(R.unnest([[1, 2], [3, 4], [5, 6]]),[1,2,3,4,5,6]) 1`] = `"boolean"`;

exports[`R.filter(isEven, [1, 2, 3, 4]) 1`] = `"number[]"`;

exports[`R.filter(isEven, [1, 2, 3, 4]) 2`] = `"number[]"`;

exports[`R.findLastIndex(R.propEq('a', 1))(xs) 1`] = `"number"`;

exports[`R.findLastIndex(R.propEq('a', 4))(xs) 1`] = `"number"`;

exports[`R.match(/([a-z]a)/g, 'bananas') 1`] = `"string[]"`;

exports[`R.match(/a/, 'b') 1`] = `"string[]"`;

exports[`R.maxBy(cmp)(a)(b) 1`] = `"{ x: number; }"`;

exports[`R.maxBy(cmp)(a, c) 1`] = `"{ x: number; }"`;

exports[`R.maxBy(cmp, a, c) 1`] = `"{ x: number; }"`;

exports[`R.nth(-99)(list) 1`] = `"undefined"`;

exports[`R.nth(-99, list) 1`] = `"undefined"`;

exports[`R.or(false, true) 1`] = `"boolean"`;

exports[`R.partition((x: number) => x > 2)([1, 2, 3, 4]) 1`] = `"[number[], number[]]"`;

exports[`R.partition((x: number) => x > 2, [1, 2, 3, 4]) 1`] = `"[number[], number[]]"`;

exports[`R.partition(R.contains('s'))(['sss', 'ttt', 'foo', 'bars']) 1`] = `"[string[], string[]]"`;

exports[`R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']) 1`] = `"[string[], string[]]"`;

exports[`R.path(['a', 'b', 'c'], {a: {b: {c: 2}}}) 1`] = `"number"`;

exports[`R.path(['a', 'b'], {a: {b: 2}}) 1`] = `"number"`;

exports[`R.pipe(
            R.prop<string>('name'),
            R.length
        )({ name: 'dave' }) 1`] = `"number"`;

exports[`R.pipe(double, double, shout) 1`] = `"(x0: number) => string"`;

exports[`R.pipe(double, double, shout)(10) 1`] = `"string"`;

exports[`R.pluck('a', [{a: 1}, {a: 2}]) 1`] = `"number[]"`;

exports[`R.prop('x', {x: 100}) 1`] = `"number"`;

exports[`R.props(['x', 'y'], {x: 1, y: 2}) 1`] = `"number[]"`;

exports[`R.reject(isOdd, [1, 2, 3, 4]) 1`] = `"number[]"`;

exports[`R.reverse([1, 2, 3]) 1`] = `"number[]"`;

exports[`R.reverse([1, 2]) 1`] = `"number[]"`;

exports[`R.reverse([1]) 1`] = `"number[]"`;

exports[`R.take(3,[1,2,3,4,5]) 1`] = `"number[]"`;

exports[`R.takeLast(1, ['foo', 'bar', 'baz']) 1`] = `"string[]"`;

exports[`R.takeLast(2)(['foo', 'bar', 'baz']) 1`] = `"string[]"`;

exports[`R.transpose([[1, 2, 3], ['a', 'b', 'c']]) 1`] = `"any[][]"`;

exports[`R.transpose([[10, 11], [20], [], [30, 31, 32]]) 1`] = `"number[][]"`;

exports[`R.unapply(JSON.stringify)(1, 2, 3) 1`] = `"string"`;

exports[`R.uniq([1, 1, 2, 1]) 1`] = `"number[]"`;

exports[`R.where(spec)({w: 10, x: 2, y: 300}) 1`] = `"boolean"`;

exports[`R.where(spec)({x: 1, y: 'moo', z: true}) 1`] = `"boolean"`;

exports[`R.where(spec, {w: 10, x: 2, y: 300}) 1`] = `"boolean"`;

exports[`R.where(spec, {x: 1, y: 'moo', z: true}) 1`] = `"boolean"`;

exports[`R.where(spec2, {x: 2, y: 7}) 1`] = `"boolean"`;

exports[`R.where(spec2, {x: 3, y: 8}) 1`] = `"boolean"`;

exports[`R.whereEq({a: 'one'}, {a: 'one'}) 1`] = `"boolean"`;

exports[`addThree(3) 1`] = `"R.CurriedFunction2<number, number, number>"`;

exports[`addThree(3)(2) 1`] = `"R.CurriedFunction1<number, number>"`;

exports[`addThree(3)(2)(1) 1`] = `"number"`;

exports[`addThree(3, 2) 1`] = `"R.CurriedFunction1<number, number>"`;

exports[`addThree(3, 2, 1) 1`] = `"number"`;

exports[`addTwo(3) 1`] = `"R.CurriedFunction1<number, number>"`;

exports[`addTwo(3)(1) 1`] = `"number"`;

exports[`addTwoNumbersCurried 1`] = `"R.CurriedFunction2<number, number, number>"`;

exports[`addTwoNumbersCurried(2,3) 1`] = `"number"`;

exports[`compF2('foo') 1`] = `"number"`;

exports[`curriedFourNumbers 1`] = `"R.CurriedFunction4<number, number, number, number, number>"`;

exports[`curriedFourNumbers(1) 1`] = `"R.CurriedFunction3<number, number, number, number>"`;

exports[`curriedFourNumbers(1)(2) 1`] = `"R.CurriedFunction2<number, number, number>"`;

exports[`curriedFourNumbers(1)(2)(3)(4) 1`] = `"number"`;

exports[`curriedFourNumbers(1,2)(3,4) 1`] = `"number"`;

exports[`curriedFourNumbers(1,2,3)(4) 1`] = `"number"`;

exports[`f(3, 4) 1`] = `"number"`;

exports[`f0(3, 4) 1`] = `"number"`;

exports[`f1(3, 4) 1`] = `"number"`;

exports[`f2(3, 4) 1`] = `"number"`;

exports[`f3(3, 4) 1`] = `"number"`;

exports[`f4(3, 4) 1`] = `"number"`;

exports[`f5(3, 4) 1`] = `"number"`;

exports[`fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}) 1`] = `"string"`;

exports[`inc(2) 1`] = `"number"`;

exports[`mapIndexed(function(val: string, idx: number) {return idx + '-' + val;})(['f', 'o', 'o', 'b', 'a', 'r']) 1`] = `"string[]"`;

exports[`onlyNumberList(R.filter(isEven,[1,2,3,4])) 1`] = `"number[]"`;

exports[`pipeF2('foo') 1`] = `"number"`;

exports[`pred({a: 1, b: 1}) 1`] = `"boolean"`;

exports[`pred({a: 1, b: 2}) 1`] = `"boolean"`;

exports[`range(3, 4, 9, -3) 1`] = `"number[]"`;

exports[`takeFive(members) 1`] = `"string[]"`;

exports[`takesThreeArgs(1, 2, 3) 1`] = `"number[]"`;

exports[`takesThreeArgs.length 1`] = `"number"`;

exports[`takesTwoArgs.length 1`] = `"number"`;
