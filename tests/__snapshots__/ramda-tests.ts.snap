// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add R.add(2, 3) 1`] = `"number"`;

exports[`add R.add(7)(10) 1`] = `"number"`;

exports[`addIndex R.addIndex<number, number, number[], number[]>(R.map)(squareEnds)([8, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex R.addIndex<number, number, number[], number[]>(R.map)(squareEnds, [8, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex R.addIndex<number, void, number[], number[]>(R.forEach)(plusFive)([1, 2, 3]) 1`] = `"number[]"`;

exports[`addIndex filterIndexed(lastTwo)([8, 6, 7, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex reduceIndexed(
        (acc: string, val: string, idx: number) => \`\${acc},\${idx}-\${val}\`,
        '',
        ['f', 'o', 'o', 'b', 'a', 'r'],
      ) 1`] = `"{}"`;

exports[`addIndex reduceIndexed(objectify)({}, ['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`addIndex reduceIndexed(objectify, {})(['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`addIndex reduceIndexed(objectify, {}, ['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`adjust R.adjust(R.add(10))(1)([1, 2, 3]) 1`] = `"number[]"`;

exports[`adjust R.adjust(R.add(10), 1, [1, 2, 3]) 1`] = `"number[]"`;

exports[`all R.all(lessThan2)([1, 2]) 1`] = `"boolean"`;

exports[`all R.all(lessThan3)([1, 2]) 1`] = `"boolean"`;

exports[`allPass R.allPass([gt10, even])(11) 1`] = `"boolean"`;

exports[`allPass R.allPass([gt10, even])(12) 1`] = `"boolean"`;

exports[`always R.always('Tee')() 1`] = `"string"`;

exports[`and R.and(0)([]) 1`] = `"number | never[]"`;

exports[`and R.and(0, []) 1`] = `"0 | never[]"`;

exports[`and R.and(false, true) 1`] = `"boolean"`;

exports[`and R.and(null, '') 1`] = `"\\"\\" | null"`;

exports[`any R.any(lessThan0)([1, 2]) 1`] = `"boolean"`;

exports[`any R.any(lessThan2)([1, 2]) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(8) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(9) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(11) 1`] = `"boolean"`;

exports[`ap R.ap([R.multiply(2), R.add(3)])([1, 2, 3]) 1`] = `"number[]"`;

exports[`ap R.ap([R.multiply(2), R.add(3)], [1, 2, 3]) 1`] = `"number[]"`;

exports[`aperture R.aperture(2, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(3, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(7)([1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(7, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`append R.append('tests')(['write', 'more']) 1`] = `"string[]"`;

exports[`append R.append('tests', ['write', 'more']) 1`] = `"string[]"`;

exports[`append R.append('tests', []) 1`] = `"string[]"`;

exports[`append R.append(['tests'])(['write', 'more']) 1`] = `"(string | string[])[]"`;

exports[`append R.append(['tests'], ['write', 'more']) 1`] = `"(string | string[])[]"`;

exports[`apply R.apply(Math.max)(nums) 1`] = `"number"`;

exports[`apply R.apply(Math.max, nums) 1`] = `"number"`;

exports[`applySpec getMetrics(2, 4) 1`] = `"T"`;

exports[`ascend R.sort(R.__, people)(byAge) 1`] = `"{ name: string; age: number; }[]"`;

exports[`ascend R.sort(byAge, people) 1`] = `"{}[]"`;

exports[`assoc R.assoc('c')(3, {a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assoc R.assoc('c', 3)({a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assoc R.assoc('c', 3, {a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'])(42, {a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'], 42)({a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`binary takesThreeArgs(1, 2, 3) 1`] = `"number[]"`;

exports[`binary takesThreeArgs.length 1`] = `"number"`;

exports[`binary takesTwoArgs(1, 2, 3) 1`] = `"Expected 2 arguments, but got 3."`;

exports[`binary takesTwoArgs.length 1`] = `"number"`;
