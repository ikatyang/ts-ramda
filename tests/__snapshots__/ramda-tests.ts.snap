// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add R.add(2, 3) 1`] = `"number"`;

exports[`add R.add(7)(10) 1`] = `"number"`;

exports[`addIndex R.addIndex<number, number, number[], number[]>(R.map)(squareEnds)([8, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex R.addIndex<number, number, number[], number[]>(R.map)(squareEnds, [8, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex R.addIndex<number, void, number[], number[]>(R.forEach)(plusFive)([1, 2, 3]) 1`] = `"number[]"`;

exports[`addIndex filterIndexed(lastTwo)([8, 6, 7, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]) 1`] = `"number[]"`;

exports[`addIndex reduceIndexed(
        (acc: string, val: string, idx: number) => \`\${acc},\${idx}-\${val}\`,
        '',
        ['f', 'o', 'o', 'b', 'a', 'r'],
      ) 1`] = `"{}"`;

exports[`addIndex reduceIndexed(objectify)({}, ['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`addIndex reduceIndexed(objectify, {})(['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`addIndex reduceIndexed(objectify, {}, ['a', 'b', 'c']) 1`] = `"Record<string, number>"`;

exports[`adjust R.adjust(R.add(10))(1)([1, 2, 3]) 1`] = `"number[]"`;

exports[`adjust R.adjust(R.add(10), 1, [1, 2, 3]) 1`] = `"number[]"`;

exports[`all R.all(lessThan2)([1, 2]) 1`] = `"boolean"`;

exports[`all R.all(lessThan3)([1, 2]) 1`] = `"boolean"`;

exports[`allPass R.allPass([gt10, even])(11) 1`] = `"boolean"`;

exports[`allPass R.allPass([gt10, even])(12) 1`] = `"boolean"`;

exports[`always R.always('Tee')() 1`] = `"string"`;

exports[`and R.and(0)([]) 1`] = `"number | never[]"`;

exports[`and R.and(0, []) 1`] = `"0 | never[]"`;

exports[`and R.and(false, true) 1`] = `"boolean"`;

exports[`and R.and(null, '') 1`] = `"\\"\\" | null"`;

exports[`any R.any(lessThan0)([1, 2]) 1`] = `"boolean"`;

exports[`any R.any(lessThan2)([1, 2]) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(8) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(9) 1`] = `"boolean"`;

exports[`anyPass R.anyPass([gt10, even])(11) 1`] = `"boolean"`;

exports[`ap R.ap([R.multiply(2), R.add(3)])([1, 2, 3]) 1`] = `"number[]"`;

exports[`ap R.ap([R.multiply(2), R.add(3)], [1, 2, 3]) 1`] = `"number[]"`;

exports[`aperture R.aperture(2, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(3, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(7)([1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`aperture R.aperture(7, [1, 2, 3, 4, 5]) 1`] = `"number[][]"`;

exports[`append R.append('tests')(['write', 'more']) 1`] = `"string[]"`;

exports[`append R.append('tests', ['write', 'more']) 1`] = `"string[]"`;

exports[`append R.append('tests', []) 1`] = `"string[]"`;

exports[`append R.append(['tests'])(['write', 'more']) 1`] = `"(string | string[])[]"`;

exports[`append R.append(['tests'], ['write', 'more']) 1`] = `"(string | string[])[]"`;

exports[`apply R.apply(Math.max)(nums) 1`] = `"number"`;

exports[`apply R.apply(Math.max, nums) 1`] = `"number"`;

exports[`applySpec getMetrics(2, 4) 1`] = `"T"`;

exports[`ascend R.sort(R.__, people)(byAge) 1`] = `"{ name: string; age: number; }[]"`;

exports[`ascend R.sort(byAge, people) 1`] = `"{}[]"`;

exports[`assoc R.assoc('c')(3, {a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assoc R.assoc('c', 3)({a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assoc R.assoc('c', 3, {a: 1, b: 2}) 1`] = `"{ a: number; b: number; } & Record<\\"c\\", number>"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'])(42, {a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'], 42)({a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`assocPath R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}) 1`] = `"{ a: { b: { c: number; }; }; }"`;

exports[`binary takesThreeArgs(1, 2, 3) 1`] = `"number[]"`;

exports[`binary takesThreeArgs.length 1`] = `"number"`;

exports[`binary takesTwoArgs(1, 2, 3) 1`] = `"Expected 2 arguments, but got 3."`;

exports[`binary takesTwoArgs.length 1`] = `"number"`;

exports[`bind R.bind(console.log, console) 1`] = `"{ (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }"`;

exports[`both R.both(gt10)(even)(101) 1`] = `"boolean"`;

exports[`both R.both(gt10, even)(100) 1`] = `"boolean"`;

exports[`call R.call(R.add<'11'>(), 1, 2) 1`] = `"number"`;

exports[`chain R.chain(duplicate)([1, 2, 3]) 1`] = `"number[]"`;

exports[`chain R.chain(duplicate, [1, 2, 3]) 1`] = `"number[]"`;

exports[`chain R.chain<number, number[], number>(R.append)(R.head)([1, 2, 3]) 1`] = `"number[]"`;

exports[`chain R.chain<number, number[], number>(R.append, R.head)([1, 2, 3]) 1`] = `"number[]"`;

exports[`clamp R.clamp('a', 'd', 'e') 1`] = `"\\"a\\" | \\"d\\" | \\"e\\""`;

exports[`clamp R.clamp(1, 10, -1) 1`] = `"1 | 10 | -1"`;

exports[`clamp R.clamp<number>(1)(10, 4) 1`] = `"number"`;

exports[`clamp R.clamp<number>(1, 10)(11) 1`] = `"number"`;

exports[`clone R.clone('foo') 1`] = `"\\"foo\\""`;

exports[`clone R.clone([{}, {}, {}]) 1`] = `"{}[]"`;

exports[`clone R.clone([1, 2, 3]) 1`] = `"number[]"`;

exports[`clone R.clone({}) 1`] = `"{}"`;

exports[`clone R.clone(10) 1`] = `"10"`;

exports[`clone R.clone(Date.now()) 1`] = `"number"`;

exports[`clone R.clone(obj1) 1`] = `"{}[]"`;

exports[`clone R.clone(obj2) 1`] = `"{ a: number; }[]"`;

exports[`comparator R.sort(R.comparator((a: Person, b: Person) => a.age < b.age), people) 1`] = `"Person[]"`;

exports[`complement R.complement(isEven)(21) 1`] = `"boolean"`;

exports[`complement R.complement(isEven)(42) 1`] = `"boolean"`;

exports[`compose R.compose<number, number, number>(double, R.identity) 1`] = `"(v1: number) => number"`;

exports[`compose f0(3, 4) 1`] = `"number"`;

exports[`compose f1(3, 4) 1`] = `"number"`;

exports[`compose f2(3, 4) 1`] = `"number"`;

exports[`compose f3(3, 4) 1`] = `"number"`;

exports[`compose f4(3, 4) 1`] = `"number"`;

exports[`compose f5(3, 4) 1`] = `"number"`;

exports[`compose gn('Hello', 4, 'world') 1`] = `"number"`;

exports[`composeP R.composeP(lookupFollowers, lookupUser) 1`] = `"(v1: string) => PromiseLike<{}>"`;

exports[`composeP R.composeP<string, User, string[]>(lookupFollowers, lookupUser) 1`] = `"(v1: string) => PromiseLike<string[]>"`;

exports[`concat R.concat('ABC')('DEF') 1`] = `"string"`;

exports[`concat R.concat([], []) 1`] = `"never[]"`;

exports[`concat R.concat([4, 5, 6])([1, 2, 3]) 1`] = `"number[]"`;

exports[`concat R.concat([4, 5, 6], [1, 2, 3]) 1`] = `"number[]"`;

exports[`cond fn(0) 1`] = `"string"`;

exports[`cond fn(50) 1`] = `"string"`;

exports[`cond fn(100) 1`] = `"string"`;

exports[`construct R.construct<'1', 'variadic'>()(Circle)(1, 'red') 1`] = `"Circle"`;

exports[`constructN R.constructN(2, Circle)(1, 'red') 1`] = `"Circle"`;

exports[`contains R.contains({})([{}, {}]) 1`] = `"boolean"`;

exports[`contains R.contains(3)([1, 2, 3]) 1`] = `"boolean"`;

exports[`contains R.contains(3, [1, 2, 3]) 1`] = `"boolean"`;

exports[`contains R.contains(4)([1, 2, 3]) 1`] = `"boolean"`;

exports[`contains R.contains(obj)([{}, obj, {}]) 1`] = `"boolean"`;

exports[`match R.match(/a/, null) 1`] = `"Argument of type 'null' is not assignable to parameter of type 'string'."`;

exports[`maxBy R.maxBy(cmp)(d)(e) 1`] = `
"Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type 'number'."
`;

exports[`minBy R.minBy(cmp, d, e) 1`] = `
"Argument of type '(obj: { x: number; }) => number' is not assignable to parameter of type 'Placeholder'.
  Property '\\"@@functional/placeholder\\"' is missing in type '(obj: { x: number; }) => number'."
`;

exports[`pick R.pick(['a', 'e', 'f'])<{a: number}>({a: 1, b: 2, c: 3, d: 4}) 1`] = `"{ a: number; }"`;

exports[`pick R.pick<{a: number}>(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}) 1`] = `"{ a: number; }"`;

exports[`propIs R.propIs(Number, 'x', {}) 1`] = `"boolean"`;
