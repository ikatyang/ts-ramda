import { CurriedFunction0, CurriedFunction1, CurriedFunction2, CurriedFunction3, CurriedFunction4, CurriedFunction5, CurriedFunction6 } from "./$curried-functions";
import { List, Variadic } from "./$types";
declare const lift: lift_0;
type lift_0 = {
    <R>(fn: () => R): lift_0arity_1<R>;
    <T1, R>(fn: (v1: T1) => R): lift_1arity_1<T1, R>;
    <T1, T2, R>(fn: (v1: T1, v2: T2) => R): lift_2arity_1<T1, T2, R>;
    <T1, T2, T3, R>(fn: (v1: T1, v2: T2, v3: T3) => R): lift_3arity_1<T1, T2, T3, R>;
    <T1, T2, T3, T4, R>(fn: (v1: T1, v2: T2, v3: T3, v4: T4) => R): lift_4arity_1<T1, T2, T3, T4, R>;
    <T1, T2, T3, T4, T5, R>(fn: (v1: T1, v2: T2, v3: T3, v4: T4, v5: T5) => R): lift_5arity_1<T1, T2, T3, T4, T5, R>;
    <T1, T2, T3, T4, T5, T6, R>(fn: (v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): lift_6arity_1<T1, T2, T3, T4, T5, T6, R>;
    <R>(fn: Variadic<R>): lift_variadic_1<R>;
};
type lift_0arity_1<R> = CurriedFunction0<R[]>;
type lift_1arity_1<T1, R> = CurriedFunction1<List<T1>, R[]>;
type lift_2arity_1<T1, T2, R> = CurriedFunction2<List<T1>, List<T2>, R[]>;
type lift_3arity_1<T1, T2, T3, R> = CurriedFunction3<List<T1>, List<T2>, List<T3>, R[]>;
type lift_4arity_1<T1, T2, T3, T4, R> = CurriedFunction4<List<T1>, List<T2>, List<T3>, List<T4>, R[]>;
type lift_5arity_1<T1, T2, T3, T4, T5, R> = CurriedFunction5<List<T1>, List<T2>, List<T3>, List<T4>, List<T5>, R[]>;
type lift_6arity_1<T1, T2, T3, T4, T5, T6, R> = CurriedFunction6<List<T1>, List<T2>, List<T3>, List<T4>, List<T5>, List<T6>, R[]>;
type lift_variadic_1<R> = Variadic<R[]>;
export = lift;
